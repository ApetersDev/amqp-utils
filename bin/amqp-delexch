#!/usr/bin/env ruby

require 'pp'
require File.dirname(__FILE__) + '/../lib/amqp_utils/command'

class ExchnageDeleteCommand < AmqpUtils::Command

  def prepare_options(options)
    options.banner <<-BANNER.unindent
    Deletes the supplied exchange.
    WARNING: queue bindings might become obsolete!
    
      #{command_name} exchange 

    Delete exchange options:
    BANNER
    options.opt :type, 'Exchange type (one of: topic, fanout, direct)',
        :short => :none, :default => 'topic', :required => true
    options.opt :durable, 'Is the exchange durable (true or false)',
        :short => :none, :default => 'true', :required => true
  end

  def validate
    Trollop::die "need at least one exchange name" unless args[0] && !args[0].empty?
    
    @type = if options[:type] == 'topic' then
                :topic
            elsif options[:type] == 'fanout' then
                :fanout
            elsif options[:type] == 'direct' then
                :direct
            end
    Trollop::die "exchnage type not valid" unless @type

    @durable = if options[:durable] == 'true' then
                   true
               elsif options[:durable] == 'false' then
                   false
               end
    Trollop::die "durable param not valid" unless not @durable.nil?
  end
  
  def execute
    @exchanges = args
    def @exchanges.delete_or_stop(type, durable)
      exchange = pop
      if exchange
        conn = AMQP::Channel.new
        exch = conn.__send__ :topic, exchange, {:durable => durable}
        puts "Deleting exchange #{exchange} (type=#{type}, durable=#{durable})..."
        exch.delete
        EM.next_tick { delete_or_stop(type, durable) }
      else
        AMQP.stop { EM.stop }
      end
    end

    EM.next_tick { @exchanges.delete_or_stop @type, @durable }
  end
end

ExchnageDeleteCommand.run
